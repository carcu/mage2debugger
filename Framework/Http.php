<?php

namespace SalesIgniter\Debugger\Framework;

use Magento\Framework\App\Bootstrap;
use Magento\Framework\App\Filesystem\DirectoryList;

class Http extends \Magento\Framework\App\Http
{
    /**
     * @var \Whoops\Run
     */
    private $run;

    public function onShutdown()
    {
        $request = \Magento\Framework\App\ObjectManager::getInstance()->get('\Magento\Framework\App\RequestInterface');
        if (!\Whoops\Util\Misc::isAjaxRequest() && strpos($request->getPathInfo(), 'showlogsnav/index') === false) {
            $helperDebugger = \Magento\Framework\App\ObjectManager::getInstance()->get('\SalesIgniter\Debugger\Helper\Data');
            $helperDebugger->getDataAsHtmlToFile();
        }
        $lasterror = error_get_last();
        if (in_array($lasterror['type'], [E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_USER_ERROR, E_RECOVERABLE_ERROR, E_CORE_WARNING, E_COMPILE_WARNING, E_PARSE])) {
            //$this->writeToLogFile(new \ErrorException($lasterror['message'], $lasterror['type'], 1, $lasterror['file'], $lasterror['line']));
            $helperDebugger = \Magento\Framework\App\ObjectManager::getInstance()->get('\SalesIgniter\Debugger\Helper\Data');
            $helperDebugger->addDataWithTrace($lasterror['message'], 'fatalerror');
        }
    }

    public function customExceptionHandler($exception)
    {
        //@debug
        if (class_exists('\SalesIgniter\Debugger\Helper\Data')) {
            $myDebugger = \Magento\Framework\App\ObjectManager::getInstance()->get('\SalesIgniter\Debugger\Helper\Data');
            $myDebugger->addDataWithTrace($exception);
        }
        //@end-debug
    }

    public function launch()
    {
        register_shutdown_function([&$this, 'onShutdown']);
        //set_exception_handler(array($this, 'customExceptionHandler'));
        $returned = parent::launch();

        return $returned;
    }

    /**
     * @param \Magento\Framework\App\Bootstrap $bootstrap
     * @param \Exception                       $exception
     *
     * I will modify this to only log to files. Because ajax cannot be reliable
     *
     * @return bool
     *
     * @throws \InvalidArgumentException
     */
    public function catchException(Bootstrap $bootstrap, \Exception $exception)
    {
        if (class_exists('\SalesIgniter\Debugger\Helper\Data') && \Magento\Framework\App\ObjectManager::getInstance()->get('\SalesIgniter\Debugger\Helper\Data')->isEnabled()) {
            $this->writeToLogFile($exception);
        }

        return parent::catchException($bootstrap, $exception); // TODO: Change the autogenerated stub
    }

    /**
     * @param \Exception $exception
     *
     * @throws \InvalidArgumentException
     */
    public function writeToLogFile(\Exception $exception)
    {
        if (class_exists('\SalesIgniter\Debugger\Helper\Data') && \Magento\Framework\App\ObjectManager::getInstance()->get('\SalesIgniter\Debugger\Helper\Data')->isEnabled()) {
            $this->run = new \Whoops\Run();
            $handler = new \SalesIgniter\Debugger\Model\PrettyPageHandler();
            $handler->setEditor(function ($file, $line) {
                return 'editor://open/?file=%file&line=%line';
            });
            $this->run->pushHandler($handler);
            $this->run->writeToOutput(false);
            $this->run->allowQuit(false);
            $returnMessage = $this->run->handleException($exception);
            /** @var \SalesIgniter\Debugger\Helper\Data $helperDebugger */
            $helperDebugger = \Magento\Framework\App\ObjectManager::getInstance()->get('\SalesIgniter\Debugger\Helper\Data');
            if (strpos($exception->getMessage(), 'isDebug_1') === false) {
                $helperDebugger->dfFileWrite(DirectoryList::MEDIA, 'sidebugger1/logs/errors/'.date('Y-m-d-H-i').'-'.time().'.html', $returnMessage);
            } else {
                $exArr = explode('__', $exception->getMessage());
                $context = 'debug-';
                if (isset($exArr[1])) {
                    $contextArr = explode('_', $exArr[1]);
                    if (isset($contextArr[1])) {
                        $context = $contextArr[1].'/';
                    }
                }
                $helperDebugger->dfFileWrite(DirectoryList::MEDIA, 'sidebugger1/logs/errors/'.$context.date('Y-m-d-H-i').'-'.time().'.html', $returnMessage);
            }
        }
    }

    /**
     * @param        $message
     * @param string $context
     */
    public function writeOnlyToLogFile($message, $context = '')
    {
        if (class_exists('\SalesIgniter\Debugger\Helper\Data') && \Magento\Framework\App\ObjectManager::getInstance()->get('\SalesIgniter\Debugger\Helper\Data')->isEnabled()) {
            /** @var \SalesIgniter\Debugger\Helper\Data $helperDebugger */
            $helperDebugger = \Magento\Framework\App\ObjectManager::getInstance()->get('\SalesIgniter\Debugger\Helper\Data');
            $helperDebugger->dfFileWrite(DirectoryList::MEDIA, 'sidebugger1/logs/debug/'.$context.'.html', $message, 1);
        }
    }
}
